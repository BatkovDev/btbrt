<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LegalKazBot</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/babel-standalone@7.22.9/babel.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-markdown@9.0.1/dist/react-markdown.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/remark-gfm@4.0.0/lib/index.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/rehype-raw@7.0.0/lib/index.min.js"></script>
</head>
<body>
  <div id="root"></div>
  <script type="text/babel">

    // Sidebar Component
    function Sidebar({ user, sessions, setMessages, isOpen, toggleSidebar }) {
      return (
        <div className={`fixed inset-y-0 left-0 w-64 bg-gray-50 dark:bg-gray-800 transform ${isOpen ? 'translate-x-0' : '-translate-x-full'} md:relative md:translate-x-0 transition-transform duration-200 ease-in-out z-20`}>
          <div className="p-4 border-b border-gray-200 dark:border-gray-700">
            <h2 className="text-lg font-semibold text-gray-800 dark:text-white">Chat History</h2>
            <button onClick={toggleSidebar} className="md:hidden p-2 text-gray-600 dark:text-gray-300">
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          <div className="p-4 space-y-2 overflow-y-auto h-full">
            {sessions.map(session => (
              <button
                key={session.id}
                onClick={() => setMessages(session.messages)}
                className="w-full text-left p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300"
              >
                {new Date(session.timestamp).toLocaleString()}
              </button>
            ))}
          </div>
        </div>
      );
    }

    // Chat Component
    function Chat({ user, messages, setMessages, input, setInput, loading, send }) {
      const containerRef = useRef(null);

      useEffect(() => {
        containerRef.current?.lastElementChild?.scrollIntoView({ behavior: 'smooth' });
      }, [messages]);

      return (
        <div className="flex flex-col flex-1 h-full bg-white dark:bg-gray-900">
          <div ref={containerRef} role="log" aria-live="polite" className="flex-1 overflow-y-auto p-6 space-y-4">
            {messages.map((m, i) => (
              <div key={i} className={`flex items-start ${m.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                {m.role === 'assistant' && (
                  <img src="/bot-avatar.png" alt="Bot" className="w-8 h-8 rounded-full mr-2" />
                )}
                <div className={`max-w-[70%] px-4 py-2 rounded-2xl shadow-sm break-words ${
                  m.role === 'user' ? 'bg-blue-500 text-white dark:bg-blue-600' : 'bg-gray-100 dark:bg-gray-800 dark:text-gray-200'
                }`}>
                  <ReactMarkdown
                    remarkPlugins={[window.remarkGfm]}
                    rehypePlugins={[window.rehypeRaw]}
                    components={{
                      strong: ({ node, ...props }) => <strong className="font-bold text-indigo-600" {...props} />,
                      mark: ({ node, ...props }) => <mark className="bg-yellow-200 dark:bg-yellow-600 px-1 rounded" {...props} />,
                    }}
                  >
                    {m.content}
                  </ReactMarkdown>
                </div>
                {m.role === 'user' && (
                  <img src="/user-avatar.jpg" alt="User" className="w-8 h-8 rounded-full ml-2" />
                )}
              </div>
            ))}
          </div>
          <div className="sticky bottom-0 bg-white dark:bg-gray-800 border-t p-4 flex items-center">
            <input
              type="text"
              className="flex-1 bg-gray-100 dark:bg-gray-700 rounded-full px-4 py-2 focus:outline-none focus:ring focus:ring-blue-500"
              placeholder="Введите сообщение..."
              value={input}
              onChange={e => setInput(e.target.value)}
              onKeyDown={e => e.key === 'Enter' && send()}
            />
            <button
              onClick={send}
              disabled={!input.trim() || loading}
              className="ml-4 p-3 bg-blue-500 text-white rounded-full hover:bg-blue-600 focus:outline-none focus:ring disabled:opacity-50"
            >
              ↗️
            </button>
          </div>
        </div>
      );
    }